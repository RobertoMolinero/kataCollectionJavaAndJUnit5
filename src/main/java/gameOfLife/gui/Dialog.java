package gameOfLife.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import gameOfLife.GameOfLife;
import gameOfLife.entity.Cell;
import gameOfLife.entity.Generation;
import gameOfLife.entity.World;

import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;

public class Dialog extends JDialog {
    private JPanel contentPane;
    private JPanel canvas;
    private JTextField textTime;
    private JTextField textLivingCells;
    private JLabel labelTime;
    private JLabel labelLivingCells;

    GameOfLife gameOfLife = new GameOfLife();

    List<Cell> cells = List.of(new Cell(0, 0), new Cell(1, 0), new Cell(2, 0), new Cell(0, 1),
            new Cell(0, 2), new Cell(2, 1), new Cell(2, 2), new Cell(0, 4), new Cell(0, 5),
            new Cell(2, 4), new Cell(2, 5), new Cell(0, 6), new Cell(1, 6), new Cell(2, 6));

    World world = new World(cells);
    Generation generation = new Generation(world, 0);

    public Dialog() {
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        setTitle("Game of Life (Space = Next Generation; ESC = Exit)");
        setPreferredSize(new Dimension(500, 500));

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onExit();
            }
        });

        contentPane.registerKeyboardAction(e -> onNext(), KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        contentPane.registerKeyboardAction(e -> onExit(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onNext() {
        generation = gameOfLife.calculateNextGeneration(generation);

        textTime.setText(String.format("%d", generation.getTime()));
        textLivingCells.setText(String.format("%d", generation.getWorld().getLivingCells().size()));
        canvas.repaint();
    }

    private void onExit() {
        dispose();
    }

    public static void main(String[] args) {
        Dialog dialog = new Dialog();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    private void createUIComponents() {

        canvas = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;

                int centerX = (int) (this.getSize().getWidth() / 2);
                int centerY = (int) (this.getSize().getHeight() / 2);

                int minX = world.getLivingCells().stream().map(Cell::getX).min(Integer::compare).orElse(0);
                int minY = world.getLivingCells().stream().map(Cell::getY).min(Integer::compare).orElse(0);
                int maxX = world.getLivingCells().stream().map(Cell::getX).max(Integer::compare).orElse(0);
                int maxY = world.getLivingCells().stream().map(Cell::getY).max(Integer::compare).orElse(0);

                int diffX = maxX - minX;
                int diffY = maxY - minY;

                g2d.setColor(Color.BLACK);

                int size = 10;

                for (Cell cell : generation.getWorld().getLivingCells()) {
                    g2d.fillRect(centerX + (cell.getX() * size) - ((diffX * size) / 2), centerY + (cell.getY() * size) - ((diffY * size) / 2), size, size);
                }
            }
        };
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMaximumSize(new Dimension(-1, -1));
        contentPane.setMinimumSize(new Dimension(-1, -1));
        contentPane.setPreferredSize(new Dimension(-1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        labelTime = new JLabel();
        labelTime.setText("Time:");
        panel1.add(labelTime, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textTime = new JTextField();
        textTime.setEditable(false);
        textTime.setHorizontalAlignment(4);
        textTime.setText("0");
        panel1.add(textTime, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        labelLivingCells = new JLabel();
        labelLivingCells.setText("Living Cells");
        panel1.add(labelLivingCells, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textLivingCells = new JTextField();
        textLivingCells.setEditable(false);
        textLivingCells.setHorizontalAlignment(4);
        textLivingCells.setText("0");
        panel1.add(textLivingCells, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        canvas.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        canvas.setOpaque(true);
        contentPane.add(canvas, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        canvas.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
